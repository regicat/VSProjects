@using MvcTodo.ViewModels
@model TodoListViewModel;


@{
	ViewData["Title"] = $"Todo一覧（{Model.ListMode}）";
	string leftButtonClass = string.Empty;
	string rightButtonClass = string.Empty;

	switch (Model.ListMode)
	{
		case TodoListViewModel.ModeUncompleted:
			leftButtonClass = ViewConst.ButtonClassSelected;
			rightButtonClass = ViewConst.ButtonClassNotSelected;
			break;
		case TodoListViewModel.ModeAll:
			leftButtonClass = ViewConst.ButtonClassNotSelected;
			rightButtonClass = ViewConst.ButtonClassSelected;
			break;
	}
}

<div class="table">
	<div class="table_top_line">
		<div class="table_top_left left_tab">@Html.ActionLink(TodoListViewModel.ModeUncompleted, "Index", "Todo", null, new { @class = $"left_button {leftButtonClass}" })</div>
		<div class="table_top_left left_tab">@Html.ActionLink(TodoListViewModel.ModeAll, "All", "Todo", null, new { @class = $"right_button {rightButtonClass}" })</div>
		<div class="table_top"><a href="~/todo/add" class="button">新規</a></div>
	</div>
	@foreach (var todo in Model.TodoList)
	{
		<div class="table_line">
			<div class="completed">
				<a href="#"><img src="~/images/icon/@(todo.IsCompleted ? "Checked" : "NotChecked").svg" width="32" height="32" alt="Checked"/></a>
			</div>
			<div class="title"><a href="#">@Html.DisplayFor(model => todo.Title)</a></div>
			<div class="limit">@Html.DisplayFor(model => todo.LimitDate)</div>
		</div>
	}
</div>