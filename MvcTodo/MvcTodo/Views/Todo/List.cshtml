@using MvcTodo.ViewModels
@model TodoListViewModel;


@{
	ViewData["Title"] = $"Todo一覧（{Model.ListMode}）";
	var leftButtonClass = string.Empty;
	var rightButtonClass = string.Empty;
	var leftHref = ViewConst.Sharp;
	var rightHref = ViewConst.Sharp;

	switch (Model.ListMode)
	{
		case ViewConst.ModeUncompleted:
			leftButtonClass = ViewConst.ButtonClassSelected;
			rightButtonClass = ViewConst.ButtonClassNotSelected;
			rightHref = Url.Action("All", "Todo");
			break;
		case ViewConst.ModeAll:
			leftButtonClass = ViewConst.ButtonClassNotSelected;
			rightButtonClass = ViewConst.ButtonClassSelected;
			leftHref = Url.Action("Index", "Todo");
			break;
	}

}

<div class="table">
	<div class="table_top_line">
		<div class="table_top_left left_tab"><a href="@leftHref" class="left_button @leftButtonClass">@ViewConst.ModeUncompleted</a></div>
		<div class="table_top_left left_tab"><a href="@rightHref" class="right_button @rightButtonClass">@ViewConst.ModeAll</a></div>
		<div class="table_top">@Html.ActionLink(ViewConst.ModeNew, "Add", "Todo", null, new { @class = "button" })</div>
	</div>
	@foreach (var todo in Model.TodoList)
	{
		var checkUrl = Url.Action("Check", "Todo", new RouteValueDictionary { { "id", todo.TodoId },  { "checkValue", todo.IsCompleted ? "off" : "on"}});
		var todoUrl = Url.Action("Show", "Todo", new RouteValueDictionary { { "id", todo.TodoId} });
		var checkedValue = (todo.IsCompleted ? "Checked" : "NotChecked");
		var iconUrl = Url.Content($"~/images/icon/{checkedValue}.svg");
		<div class="table_line">
			<div class="completed">
				<a href="@checkUrl"><img src="@iconUrl" width="32" height="32" alt="@checkedValue" /></a>
			</div>
			<div class="title"><a href="@todoUrl">@Html.DisplayFor(model => todo.Title)</a></div>
			<div class="limit">@Html.DisplayFor(model => todo.LimitDate)</div>
		</div>
	}
</div>